-- Concept 定义部分

-- 点
def_cpt Point = {x:Num; y:Num}

-- 椭圆: 成员是其x、y的平方的系数的倒数
def_cpt Ellipse_Std <- Curve = {recip_coeff_sq_x:Num; recip_coeff_sq_y:Num}

-- 双曲线: 成员是其x、y的平方的系数的倒数
-- Hyperbola_Std_1、Hyperbola_Std_2 分别代表焦点在 X 轴、Y 轴上的双曲线
def_cpt Hyperbola_Std_1 <- Curve = {recip_coeff_sq_x:Num; recip_coeff_sq_y:Num}
def_cpt Hyperbola_Std_2 <- Curve = {recip_coeff_sq_x:Num; recip_coeff_sq_y:Num}

-- 抛物线: 成员是其x或y的系数
-- Parabola_Std_r、Parabola_Std_l、Parabola_Std_u、Parabola_Std_d 分别代表开头朝 右、左、上、下 的抛物线
def_cpt Parabola_Std_r <- Curve = {coeff_x:Num}
def_cpt Parabola_Std_l <- Curve = {coeff_x:Num}
def_cpt Parabola_Std_u <- Curve = {coeff_y:Num}
def_cpt Parabola_Std_d <- Curve = {coeff_y:Num}

-- 直线: ax+by+c=0
def_cpt Line_Std = {a:Num; b:Num; c:Num}


-- Individual 定义部分

-- 坐标原点
def_indi origin:Point = {x:=0; y:=0}


-- Operator 定义部分

-- 生成直线方程: ax+by+c=0
def_op Generate_Line_Eq(l:Num; m:Num; n:Num) = {assert l_std:Line_Std = {a:=l; b:=m; c:=n}}

-- 把点代入曲线方程，生成新的等式
def_op Subst_Point_Into_Curve(p:Point; c:Curve) = {Subst(Subst(Left(Equation(c)),x,p.x),y,p.y) = Subst(Subst(Right(Equation(c)),x,p.x),y,p.y)}




-- 知识部分

{e:Ellipse; {Is_In_Form(Equation(e),x^2/a^2+y^2/b^2==1)}} => {assert e_std:Ellipse_Std = {recip_coeff_sq_x:=Recip(Extract_Coeff(Equation(e),x^2)); recip_coeff_sq_y:=Recip(Extract_Coeff(Equation(e),y^2))}; {e=e_std}} # 如果椭圆方程（可）满足标准形式 x^2/a^2+y^2/b^2=1，则提取其中的x^2和y^2的系数，并进一步生成Ellipse_Std概念的个体 #

{e:Ellipse_Std; {e.recip_coeff_sq_x>e.recip_coeff_sq_y}} => {Focus_On_X_Axis(e)} # 已知标准椭圆方程中x^2系数的倒数大于y^2系数的倒数，可得到椭圆的焦点在x轴上 #

{e:Ellipse_Std; {e.recip_coeff_sq_x<e.recip_coeff_sq_y}} => {Focus_On_Y_Axis(e)} # 已知标准椭圆方程中x^2系数的倒数小于y^2系数的倒数，可得到椭圆的焦点在y轴上 #

{e:Ellipse_Std; {Focus_On_X_Axis(e)}} => {{Param_A(e) = Sqrt(e.recip_coeff_sq_x)}; {Param_B(e) = Sqrt(e.recip_coeff_sq_y)}} # 已知标准椭圆e的焦点在x轴上，可得:e的参数a等于其x^2系数的倒数的开方、e的参数b等于其y^2系数的倒数的开方  #

{e:Ellipse_Std; {Focus_On_Y_Axis(e)}} => {{Param_A(e) = Sqrt(e.recip_coeff_sq_y)}; {Param_B(e) = Sqrt(e.recip_coeff_sq_x)}} # 已知标准椭圆e的焦点在y轴上，可得:e的参数a等于其y^2系数的倒数的开方、e的参数b等于其x^2系数的倒数的开方  #

e:Ellipse => {Length(Major_Axis(e)) = Mul(2,Param_A(e))} # 椭圆的长轴长等于两倍的参数a #

e:Ellipse => {Length(Minor_Axis(e)) = Mul(2,Param_B(e))} # 椭圆的短轴长等于两倍的参数b #



{pa:Parabola; {Is_In_Form(Equation(pa),y^2==2*p*x)}} => {assert p_std:Parabola_Std_r = {coeff_x:=Extract_Coeff(Equation(pa),x)}; {pa=p_std}} # 如果抛物线方程（可）满足标准形式 y^2=2*p*x，则提取其中的x的系数，并进一步生成Parabola_Std_r概念的个体 #

{pa:Parabola; {Is_In_Form(Equation(pa),y^2==-2*p*x)}} => {assert p_std:Parabola_Std_l = {coeff_x:=Extract_Coeff(Equation(pa),x)}; {pa=p_std}} # 如果抛物线方程（可）满足标准形式 y^2=-2*p*x，则提取其中的x的系数，并进一步生成Parabola_Std_l概念的个体 #

{pa:Parabola; {Is_In_Form(Equation(pa),x^2==2*p*y)}} => {assert p_std:Parabola_Std_u = {coeff_y:=Extract_Coeff(Equation(pa),y)}; {pa=p_std}} # 如果抛物线方程（可）满足标准形式 x^2=2*p*y，则提取其中的y的系数，并进一步生成Parabola_Std_u概念的个体 #

{pa:Parabola; {Is_In_Form(Equation(pa),x^2==-2*p*y)}} => {assert p_std:Parabola_Std_d = {coeff_y:=Extract_Coeff(Equation(pa),y)}; {pa=p_std}} # 如果抛物线方程（可）满足标准形式 x^2=-2*p*y，则提取其中的y的系数，并进一步生成Parabola_Std_d概念的个体 #

pa:Parabola_Std_r => {Param_P(pa) = Div(pa.coeff_x,2)} # 标准抛物线Parabola_Std_r的参数P等于其x系数的一半 #

pa:Parabola_Std_l => {Param_P(pa) = Neg(Div(pa.coeff_x,2))} # 标准抛物线Parabola_Std_l的参数P等于其x系数的一半的相反数 #

pa:Parabola_Std_u => {Param_P(pa) = Div(pa.coeff_y,2)} # 标准抛物线Parabola_Std_u的参数P等于其y系数的一半 #

pa:Parabola_Std_d => {Param_P(pa) = Neg(Div(pa.coeff_y,2))} # 标准抛物线Parabola_Std_d的参数P等于其y系数的一半的相反数 #

pa:Parabola_Std_r => {Focus_On_X_Axis(pa)} # 标准抛物线Parabola_Std_r的焦点在其X轴上 #

pa:Parabola_Std_l => {Focus_On_X_Axis(pa)} # 标准抛物线Parabola_Std_l的焦点在其X轴上 #

pa:Parabola_Std_u => {Focus_On_Y_Axis(pa)} # 标准抛物线Parabola_Std_u的焦点在其Y轴上 #

pa:Parabola_Std_d => {Focus_On_Y_Axis(pa)} # 标准抛物线Parabola_Std_d的焦点在其Y轴上 #

pa:Parabola_Std_r => {Line_Equation(Directrix(pa))=Generate_Line_Eq(1,0,Div(Param_P(pa),2))} # 为标准抛物线Parabola_Std_r生成准线方程:x=-p/2 #

pa:Parabola_Std_l => {Line_Equation(Directrix(pa))=Generate_Line_Eq(1,0,Neg(Div(Param_P(pa),2)))} # 为标准抛物线Parabola_Std_l生成准线方程:x=p/2 #

pa:Parabola_Std_u => {Line_Equation(Directrix(pa))=Generate_Line_Eq(0,1,Div(Param_P(pa),2))} # 为标准抛物线Parabola_Std_u生成准线方程:y=-p/2 #

pa:Parabola_Std_d => {Line_Equation(Directrix(pa))=Generate_Line_Eq(0,1,Neg(Div(Param_P(pa),2)))} # 为标准抛物线Parabola_Std_d生成准线方程:y=p/2 #
